from OpenGL.GL import*
from OpenGL.GLU import*
from OpenGL.GLUT import*
import numpy as np
from math import *

def myInit():
    glMatrixMode(GL_PROJECTION)
    gluPerspective(72,1,1,100)
    gluLookAt(8,9,10,
             0,0,0
             ,0,1,0)
    glClearColor(1,1,1,0)

    glClear(GL_COLOR_BUFFER_BIT)


def drawXYZ():
    glBegin(GL_LINES)
    glColor3f(0, 0, 0)
    glVertex(0, 10, 0)
    glVertex(0, -10, 0)
    glVertex(10, 0, 0)
    glVertex(-10, 0, 0)
    glVertex(0, 0, 10)
    glVertex(0, 0, -10)
    glEnd()


angle = 0
Trans = 0
forward = True


def frontWindow():

    glLoadIdentity()
    glRotate(turn*5, 0, turn, 0)
    glTranslate(0, 1, Trans)
    glTranslate(0, 0, 0)
    glColor3f(0.7, 0.7, 0.7)

    glBegin(GL_POLYGON)

    glVertex(-1.05, .9, 1.2)
    glVertex(1.5, .9, 1.2)
    glVertex(1.5, -0.25, 1.2)
    glVertex(-1.05, -0.25, 1.2)


    glEnd()

def SideWindow():
    glLoadIdentity()
    glRotate(turn*5, 0, turn, 0)
    glTranslate(3.5, 1, Trans)
    glTranslate(0, 0, 0)
    glColor3f(0.7, 0.7, 0.7)

    glBegin(GL_POLYGON)

    glVertex(-1.5, 0.9, -0.5)
    glVertex(-1.5, 0.9, 0.7)
    glVertex(-1.5, -0.25, 0.7)
    glVertex(-1.5, -0.25, -0.5)

    glEnd()


def street():
    glLoadIdentity()
    glColor3f(.2, .2, .2)
    glBegin(GL_POLYGON)
    glVertex(3, 0, 10)
    glVertex(-1.5, 0, 10)
    glVertex(-1.5, 0, -25)
    glVertex(3, 0, -20)
    glEnd()

    glColor3f(1, 1, 1)
    glBegin(GL_POLYGON)
    glVertex(.7, 0, 6)
    glVertex(.7, 0, 4)
    glVertex(1.2, 0, 4)
    glVertex(1.2, 0, 6)

    glEnd()

    glColor3f(1, 1, 1)
    glBegin(GL_POLYGON)
    glVertex(.7, 0, 9)
    glVertex(.7, 0, 9)
    glVertex(1.2, 0, 7)
    glVertex(1.2, 0, 9)

    glEnd()

    glColor3f(1, 1, 1)
    glBegin(GL_POLYGON)
    glVertex(.7, 0, 3)
    glVertex(.7, 0, 1)
    glVertex(1.2, 0, 1)
    glVertex(1.2, 0, 3)

    glEnd()

    glColor3f(1, 1, 1)
    glBegin(GL_POLYGON)
    glVertex(.7, 0, 0)
    glVertex(.7, 0, -2)
    glVertex(1.2, 0, -2)
    glVertex(1.2, 0, 0)

    glEnd()
    glColor3f(1, 1, 1)
    glBegin(GL_POLYGON)
    glVertex(.7, 0, -3)
    glVertex(.7, 0, -5)
    glVertex(1.2, 0, -5)
    glVertex(1.2, 0, -3)

    glEnd()
    glColor3f(1, 1, 1)
    glBegin(GL_POLYGON)
    glVertex(.7, 0, -6)
    glVertex(.7, 0, -8)
    glVertex(1.2, 0, -8)
    glVertex(1.2, 0, -6)

    glEnd()
    glColor3f(1, 1, 1)
    glBegin(GL_POLYGON)
    glVertex(.7, 0, -9)
    glVertex(.7, 0, -11)
    glVertex(1.2, 0, -11)
    glVertex(1.2, 0, -9)

    glEnd()
    glColor3f(1, 1, 1)
    glBegin(GL_POLYGON)
    glVertex(.7, 0,-12 )
    glVertex(.7, 0, -14)
    glVertex(1.2, 0, -14)
    glVertex(1.2, 0, -12)

    glEnd()
    glColor3f(1, 1, 1)
    glBegin(GL_POLYGON)
    glVertex(.7, 0, -15)
    glVertex(.7, 0, -17)
    glVertex(1.2, 0, -17)
    glVertex(1.2, 0, -15)

    glEnd()

    glColor3f(0, 0, 0)
    glBegin(GL_LINE_LOOP)
    glVertex(3, 0, 10)
    glVertex(-1.5, 0, 10)
    glVertex(-1.5, 0, -25)
    glVertex(3, 0, -20)

    glEnd()
def draw():
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()
    global angle
    global Trans
    global forward
    global turn





    glClear(GL_COLOR_BUFFER_BIT)
    #drawXYZ()
    glColor3f(0.6, 1, 0.2)
    glBegin(GL_QUADS)
    glVertex(5000, -20.25 , -61)
    glVertex(-5000, 221.25 , -60)
    glVertex(-3000, -123.25  , -60)
    glVertex(-3000, -13.25  , 51)
    glEnd()
    street()

    glLoadIdentity
    glColor3f(1,0,0)
    glRotate(turn*5 , 0, turn, 0)
    glTranslate(0, 0, Trans)
    glScale(0.5,0.25,1)

    glutSolidCube(5)

    glLoadIdentity
    glTranslate(0,5,0)
    glScale(1,1,0.5)
    glRotate(turn, 1, 0, 0)
    glutSolidCube(5)

    glColor3f(2, 1.5, 2)
    glLoadIdentity()
    glRotate(turn * 5, 0, 0, turn)
    glTranslate(-0.5 * 0.5 * 0.25, 0.5 * 0.5 * 5, 0.5 + 0.5 * 5)
    glTranslate(0, 0, 0)
    glutSolidSphere(0.525, 15, 15)

    #glColor3f(0.5, 0.5, 0.5)

    #glLoadIdentity()
    #glTranslate(Trans-0.5 * 5, -0.5 * 0.25 * 5, -0.5 * 0.5 * 5)
    #glRotate(angle, 0, 0, 1)
    #glutSolidTorus(0.125, 0.5, 20, 20)





    glColor3f(0.5, 0.5, 0.5)
    glLoadIdentity()
    glRotate(turn*5, 0, 0, turn)
    glTranslate(0.5 *0.5*5, -0.5* 0.25*5, Trans+0.5*5)
    glRotate(90, 0, 1, 0)

    glTranslate(0, 0, 0)

    glutSolidTorus(0.125, 0.5, 20, 20)



    glColor3f(0.5, 0.5, 0.5)

    glLoadIdentity()
    glRotate(turn * 5, 0, 0, turn)
    glTranslate(-0.5 * 0.5 * 5, -0.5 * 0.25 * 5, Trans+0.5 * 5)
    glRotate(90, 0, 1, 0)
    glTranslate(0, 0, 0)
    glutSolidTorus(0.125, 0.5, 20, 20)

    glColor3f(0.5, 0.5, 0.5)

    glLoadIdentity()
    glRotate(turn*5, 0, 0, turn)
    glTranslate(0.5 * 0.5 * 5, -0.5 * 0.25 * 5, Trans-0.5 * 5)
    glRotate(90, 0, 1, 0)
    glTranslate(0, 0, 0)
    glutSolidTorus(0.125, 0.5, 20, 20)

    glColor3f(1.5, 1.5, 0.1)
    glLoadIdentity()
    glRotate(turn * 5, 0, 0, turn)
    glTranslate(0.5 * 0.5 * 5, 0.5 * 0.25 * 5, Trans + 0.5 * 5)
    glTranslate(0, 0, 0)
    glutSolidSphere( 0.25, 15, 15)

    glColor3f(1.5, 1.5, 0.1)
    glLoadIdentity()
    glRotate(turn * 5, 0, 0, turn)
    glTranslate(-0.5 * 0.5 * 0.25, 0.5 * 0.25 * 5,Trans + 0.5 * 5 )
    glTranslate(0, 0, 0)
    glutSolidSphere(0.25, 15, 15)


    frontWindow()

    SideWindow()


    glutSwapBuffers()
    if forward :
        angle -= 0.1
        Trans += 0.001
        if Trans > 5 :
            forward = False
    else:
        angle += 0.1
        Trans -= 0.001
        if Trans< -5:
            forward = True






turn = 0


def arrowHand(key, x, y):

    global turn


    if key == GLUT_KEY_RIGHT :

        turn += .50
    elif key == GLUT_KEY_LEFT:
        turn -= .50



    draw()
    glLoadIdentity()
    glTranslate(0.5 * 5, 0.5 * 0.25 * 5, turn* 1.5)


glutInit()
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB)
glutInitWindowSize(900, 900)
glutCreateWindow(b"Moving Car")
myInit()
glutDisplayFunc(draw)
glutIdleFunc(draw)
glutSpecialFunc(arrowHand)

glutMainLoop()
